@use "../abstracts/variables" as vars;
@use "../abstracts/functions" as func;
@use 'sass:map';
@use "sass:math";
@use "sass:color";
@forward 'mixins/typography';
@forward 'mixins/spacing';
@forward 'mixins/flex';
@forward 'mixins/grid';


// // Modern mixin for media queries
@mixin respond-to($size) {
   @if map.has-key(vars.$breakpoints, $size) {
     @media screen and (min-width: map.get(vars.$breakpoints, $size)) {
      @content;
     }
   } @else {
     @warn "Unknown breakpoint: #{$size}";
   }
 }

// // Stack (vertical spacing)
// @mixin stack($space: $space-md) {
//   display: flex;
//   flex-direction: column;
//   gap: $space;
// }

// // Modified responsive-stack mixin that accepts a spacing configuration
// @mixin responsive-stack($default-space: $space-sm, $responsive-spaces: ()) { 
//   display: flex;
//   flex-direction: column;
//   gap: $default-space; // Base spacing for mobile

//   @each $breakpoint, $space in $responsive-spaces {
//     @if map.has-key(vars.$breakpoints, $breakpoint) {
//       @include respond-to($breakpoint) {
//         gap: $space;
//       }
//     }
//   }
// }

// // Cluster (horizontal spacing)
// @mixin cluster($space: $space-sm) {
//   display: flex;
//   flex-wrap: wrap;
//   gap: $space;
// }

// // Space children
// @mixin space-children($space: $space-md, $direction: 'vertical') {
//   > * + * {
//     @if $direction == 'vertical' {
//       margin-top: $space;
//     } @else {
//       margin-left: $space;
//     }
//   }
// }

// // Section padding
// @mixin section-padding($size: 'sm') {
//   @if $size == 'md' {
//     padding: vars.$section-spacing-md 0;
//   } @else if $size == 'lg' {
//     padding: vars.$section-spacing-lg 0;
//   } @else {
//     padding: vars.$section-spacing-sm 0;
//   }
// }

// // Responsive section padding
// @mixin responsive-section-padding($size: 'sm') {
//   padding: vars.$section-spacing-sm 0; // Default padding for small size

//   @include respond-to(md) {
//     @if $size == 'md' {
//       padding: vars.$section-spacing-md 0;
//     }
//   }

//   @include respond-to(lg) {
//     @if $size == 'lg' {
//       padding: vars.$section-spacing-lg 0;
//     }
//   }
// }



@mixin aspect-ratio($width, $height) {
  aspect-ratio: calc($width / $height);
  overflow: hidden;
}


@mixin image-fill {
  width: 100%;
  height: 100%;
  object-fit: cover;
}




// // Clearfix
// @mixin clearfix { 
//   &::after {
//     content: "";
//     display: table;
//     clear: both;
//   }
// }

// // Text Truncate
// @mixin text-truncate {
//   overflow: hidden;
//   text-overflow: ellipsis;
//   white-space: nowrap;
// }

// // Transition
// @mixin transition($property, $duration, $timing: ease) {
//   transition: $property $duration $timing;
// }

// // Box Shadow
// @mixin box-shadow($x, $y, $blur, $color) {
//   box-shadow: $x $y $blur $color;
// }

// @mixin generate-color-variants($color, $prefix) {
//   // Base color
//   --#{$prefix}: #{$color};
  
//   // Just a few opacity variants for overlays and subtle backgrounds
//   --#{$prefix}-10: #{rgba($color, 0.1)};
//   --#{$prefix}-20: #{rgba($color, 0.2)};
//   --#{$prefix}-30: #{rgba($color, 0.3)};
  
//   // One lighter and one darker variant for hover states and emphasis
//   --#{$prefix}-lighter: #{color.scale($color, $lightness: 20%)};
//   --#{$prefix}-darker: #{color.scale($color, $lightness: -10%)};
// }